{"version":3,"sources":["controllers/AuthorizeController.js"],"names":["req","res","validateIndexAction","err","show","error","msg","index","resolve","reject","responseType","query","response_type","clientID","client_id","isEmpty","field","toLowerCase","service","findOneByField","console","log"],"mappings":";;;;;;;AA8BA;;;;;;0DAKO,kBAAqBA,GAArB,EAA0BC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAGaC,oBAAoBF,GAApB,CAHb;;AAAA;AAGCG,2BAHD;;AAAA,6BAICA,GAJD;AAAA;AAAA;AAAA;;AAAA,0DAKQF,IAAIG,IAAJ,CAAS,OAAT,EAAkB,EAAEC,OAAOF,IAAIG,GAAb,EAAlB,CALR;;AAAA;AAAA,0DAQIL,IAAIG,IAAJ,CAAS,OAAT,CARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,K;;;;;AAnCtB;;;;AACA;;;;AACA;;;;;;;;AAGA;;;;;;AAMA,SAASL,mBAAT,CAA6BF,GAA7B,EAAkC;AAC9B,WAAO;AAAA,6DAAY,iBAAgBQ,OAAhB,EAAyBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,wCADW,GACIV,IAAIW,KAAJ,CAAUC,aADd;AAEXC,oCAFW,GAEAb,IAAIW,KAAJ,CAAUG,SAFV;;AAAA,iCAIX,oBAAUC,OAAV,CAAkBL,gBAAgB,EAAlC,CAJW;AAAA;AAAA;AAAA;;AAAA,6DAKJF,QAAQ,EAAEQ,OAAO,eAAT,EAA0BV,KAAK,2BAA/B,EAAR,CALI;;AAAA;AAAA,kCAMJI,aAAaO,WAAb,OAA+B,MAN3B;AAAA;AAAA;AAAA;;AAAA,6DAOJT,QAAQ,EAAEQ,OAAO,eAAT,EAA0BV,KAAK,4BAA/B,EAAR,CAPI;;AAAA;AAAA,iCAQJ,oBAAUS,OAAV,CAAkBF,YAAY,EAA9B,CARI;AAAA;AAAA;AAAA;;AAAA,6DASJL,QAAQ,EAAEQ,OAAO,eAAT,EAA0BV,KAAK,uBAA/B,EAAR,CATI;;AAAA;AAAA;AAAA,mCAaK,iBAAOY,OAAP,CAAeC,cAAf,CAA8B,WAA9B,EAA2CN,QAA3C,CAbL;;AAAA;AAaXK,mCAbW;;AAcfE,oCAAQC,GAAR,CAAYH,OAAZ;;AAde;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AAgBH","file":"AuthorizeController.js","sourcesContent":["import validator from 'validator'\nimport Promise from 'bluebird'\nimport models from '../models'\n\n\n/**\n * Validation method for index() action\n * @param req The request body\n * @param doneCb The callback to call when validation is complete\n * @returns Promise\n */\nfunction validateIndexAction(req) {\n    return new Promise(async function (resolve, reject) {\n        var responseType = req.query.response_type\n        var clientID = req.query.client_id\n        \n        if (validator.isEmpty(responseType || \"\")) {\n            return resolve({ field: 'response_type', msg: 'Response type is required' })\n        } else if (responseType.toLowerCase() !== \"code\") {\n            return resolve({ field: 'response_type', msg: 'Response type is not valid' })\n        } else if (validator.isEmpty(clientID || \"\")) {\n            return resolve({ field: 'response_type', msg: 'Client ID is required' })\n        }\n        \n        // find service by client id\n        let service = await models.service.findOneByField(\"client_id\", clientID)\n        console.log(service)\n    })\n}\n\n/**\n * Index action\n * @param  {object} req request object\n * @param  {object} res response object\n */\nexport async function index(req, res) {\n    \n    // validate request\n    let err = await validateIndexAction(req)\n    if (err) {\n        return res.show('index', { error: err.msg })\n    }\n    \n    return res.show('index')\n}\n"]}