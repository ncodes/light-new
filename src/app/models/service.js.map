{"version":3,"sources":["models/service.js"],"names":["ServiceSchema","Schema","User","Types","ObjectId","Name","String","Type","Description","RedirectURL","EventURL","ClientID","ClientSecret","CreatedAt","Date","UpdatedAt","statics","findOneByField","field","value","resolve","reject","q","findOne","err","service","findByField","model"],"mappings":";;;;;;AACA;;;;AACA;;;;;;ieAFA;;;AAIA,IAAIA,gBAAgB,IAAI,mBAASC,MAAb,CAAoB;AACpCC,UAAM,mBAASD,MAAT,CAAgBE,KAAhB,CAAsBC,QADQ;AAEpCC,UAAMC,MAF8B;AAGpCC,UAAMD,MAH8B;AAIpCE,iBAAaF,MAJuB;AAKpCG,iBAAaH,MALuB;AAMpCI,cAAUJ,MAN0B;AAOpCK,cAAUL,MAP0B;AAQpCM,kBAAcN,MARsB;AASpCO,eAAWC,IATyB;AAUpCC,eAAWD;AAVyB,CAApB,CAApB;;AAcA;;;;;;;AAOAd,cAAcgB,OAAd,CAAsBC,cAAtB;AAAA,yDAAuC,iBAA2BC,KAA3B,EAAkCC,KAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yDAC5B,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,IAAI,EAAR;AACAA,8BAAEJ,KAAF,IAAWC,KAAX;AACA,kCAAKI,OAAL,CAAaD,CAAb,EAAgB,UAACE,GAAD,EAAMC,OAAN,EAAkB;AAC9B,oCAAID,GAAJ,EAAS,OAAOH,OAAOG,GAAP,CAAP;AACT,uCAAOJ,QAAQK,OAAR,CAAP;AACH,6BAHD;AAIH,yBAPM,CAD4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvC;;AAAA,aAAsDC,WAAtD;AAAA;AAAA;;AAAA,WAAsDA,WAAtD;AAAA;;kBAYe,mBAASC,KAAT,CAAe,SAAf,EAA0B3B,aAA1B,C","file":"service.js","sourcesContent":["// Service.js defines a service model\nimport mongoose from 'mongoose'\nimport Promise from 'bluebird'\n\nlet ServiceSchema = new mongoose.Schema({\n    User: mongoose.Schema.Types.ObjectId,\n    Name: String,\n    Type: String,\n    Description: String,\n    RedirectURL: String,\n    EventURL: String,\n    ClientID: String,\n    ClientSecret: String,\n    CreatedAt: Date,\n    UpdatedAt: Date\n})\n\n\n/**\n * findOneByField will find a service by a single field\n * \n * @param field String the field name\n * @param value String the field value\n * @return Promise\n */\nServiceSchema.statics.findOneByField = async function findByField(field, value) {\n    return new Promise((resolve, reject) => {\n        let q = {}\n        q[field] = value\n        this.findOne(q, (err, service) => {\n            if (err) return reject(err)\n            return resolve(service)\n        })\n    })\n}\n\n\nexport default mongoose.model('Service', ServiceSchema)\n\n"]}